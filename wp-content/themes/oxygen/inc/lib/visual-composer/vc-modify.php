<?php
/**
 *	This will add better support for Visual Composer in Oxygen Theme
 *	
 *	Laborator.co
 *	www.laborator.co 
 */


$lvcm_min_version = '4.2.0';
$lvcm_max_version = '4.2.9';

$plugin_dir = 'js_composer';

$files = array(
	'include/classes/core/class-wpb-map.php' => '',
	'include/classes/shortcodes/shortcodes.php' => '',
);


add_action('admin_menu', 'laborator_vc_files_check');

function laborator_vc_files_check()
{
	global $lvcm_min_version, $lvcm_max_version, $files, $plugin_dir;
	
	$replaced_version  = get_option('_lvcm_version_replaced');
	$last_check        = get_option('_lvcm_last_check');
	$plugin_path       = ABSPATH . 'wp-content/plugins/' . $plugin_dir . '/';	
	
	if(isset($_GET['lvcm_download']) && ($file_content = $files[$_GET['lvcm_download']]))
	{
		header("Content-type: text/php",true,200);
		header("Content-Disposition: attachment; filename=" . basename($_GET['lvcm_download']));
		header("Pragma: no-cache");
		header("Expires: 0");
		
		echo $file_content;
		
		exit;
	}
	
	if(isset($_GET['lvcm_tutorial']))
	{
		?>
		<style>
			body {
				background: #FAFAFA;
				font-family: Helvetica, Arial, sans-serif;
				padding: 50px;
				color: #555;
			}
			
			ol > li {
				margin-bottom: 20px;
			}
			
			ol ul > li {
				margin-top: 6px;
			}
			
			a {
				text-decoration: underline;
				color: blue;
			}
			
		</style>
		<h2>Replacing Visual Composer files manually</h2>
		
		<ol>
			<li>
				Firstly download these files:
				
				<ul>
				<?php
				foreach($files as $file_name => $code)
				{
					$plugin_file = $plugin_path . $file_name;
					?>
					<li>
						<a href="?lvcm_download=<?php echo $file_name; ?>"><?php echo basename($file_name); ?></a>
					</li>
					<?php
				}
				?>
				</ul>
			</li>
			
			<li>
				Login to your FTP server and head to this directory:
				<br />
				<br />
				<code><?php echo $plugin_path; ?></code>
			</li>
			
			<li>
				Start replacing files inside these folders:
				
				<ul>
				<?php
				foreach($files as $file_name => $code)
				{
					$plugin_file = $plugin_path . $file_name;
					?>
					<li>
						<?php if(dirname($file_name)): ?>
						Open: <code><?php echo dirname($file_name); ?></code> folder and replace <code><?php echo basename($file_name); ?></code> file
						<?php endif; ?>
					</li>
					<?php
				}
				?>
				</ul>
			</li>
			
			<li>That's all!</li>
		</ol>
		<?php
		exit;
	}
	
	if(version_compare($lvcm_min_version, WPB_VC_VERSION, '<=') && ($replaced_version == WPB_VC_VERSION || $last_check + 86400 < time()))
	{
		$are_modified = true;
		
		try {
			
			foreach($files as $file_name => $code)
			{
				$plugin_file = $plugin_path . $file_name;
				
				if($content = file_get_contents($plugin_file))
				{				
					if( ! preg_match("/Arlind Nushi/", $content))
					{
						$are_modified = false;
						break;
					}
				}
				else
				{
					$are_modified = false; 
					break;
				}
			}
		}
		catch(Exception $e)
		{
			$are_modified = false;
		}
	}
	
	// Can Replace
	if(version_compare($lvcm_max_version, WPB_VC_VERSION, '>=') && version_compare($lvcm_min_version, WPB_VC_VERSION, '<=') && ! $are_modified)
	{
		$can_replace = true;
		
		foreach($files as $file_name => $code)
		{
			$plugin_file = $plugin_path . $file_name;
			
			if( ! file_exists($plugin_file) || ! is_writable($plugin_file))
			{
				$can_replace = false;
				break;
			}
		}
		
		// Start Replacing
		if($can_replace)
		{
			foreach($files as $file_name => $code)
			{
				$plugin_file = $plugin_path . $file_name;
				$code = base64_decode($code);
				
				$fp = fopen($plugin_file, 'w');
				fwrite($fp, $code);
				fclose($fp);
			}
			
			update_option('_lvcm_version_replaced', WPB_VC_VERSION);
			update_option('_lvcm_last_check', time());
		}
		else
		{
			add_action( 'admin_notices', 'lvcm_notice' );
		}
	}
}


function lvcm_notice()
{
	?>
	<div class="updated">
		<p><strong><?php _e( 'Warning!', TD); ?></strong></p>
		<p><?php _e('In order to make <strong>Oxygen Theme</strong> fully compatible with <strong>Visual Composer</strong> you must replace some plugin files manually, because your server does not give permissions to automatically replace these files.', TD); ?></p>
		<p>
			<a href="<?php echo admin_url("?lvcm_tutorial"); ?>" target="_blank"><?php _e('Read this tutorial to remove this notice.', TD); ?></a>
		</p>
	</div>
	<?php
}